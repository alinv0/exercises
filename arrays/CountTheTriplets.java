package arrays;

import java.util.Arrays;

public class CountTheTriplets {
  static class Solution {
    int countTriplets(int[] arr) {
      if (arr.length < 3) {
        return 0;
      }
      
      Arrays.sort(arr);
      int count = 0;
      
             // For each element as the potential sum (c), find pairs (a, b) where a + b = c
       for (int i = 2; i < arr.length; i++) {
         int target = arr[i];
        int left = 0;
        int right = i - 1;
        
        while (left < right) {
          int sum = arr[left] + arr[right];
          
          if (sum == target) {
            count++;
            
            int leftVal = arr[left];
            int rightVal = arr[right];
            
            // Skip all duplicates of left value
            while (left < right && arr[left] == leftVal) {
              left++;
            }
            
            // Skip all duplicates of right value
            while (left < right && arr[right] == rightVal) {
              right--;
            }
          } else if (sum < target) {
            left++;
          } else {
            right--;
          }
        }
      }
      
      return count;
    }
  }

  public static void main(String[] args) {
    int count = new Solution().countTriplets(new int[] {1, 5, 3, 2});
    System.out.println(count);

    int count2 = new Solution().countTriplets(new int[] {2, 3, 4});
    System.out.println(count2);
    
    // Test with the large input array that should return 863
    int[] largeArray2 = {10669, 30986, 3798, 14203, 24155, 10878, 23103, 19254, 403, 25825, 305, 3400, 27365, 7574, 28506, 5944, 30733, 31859, 10752, 8903, 24346, 30048, 21316, 4132, 27599, 8224, 29348, 7263, 11337, 17006, 9924, 23584, 20706, 16460, 9326, 20121, 17238, 26264, 9943, 7353, 14628, 17376, 13604, 22690, 17719, 887, 24876, 20830, 11462, 32456, 25472, 20173, 889, 30955, 14505, 18914, 21197, 14454, 9136, 29967, 20665, 29590, 14820, 10494, 27026, 16990, 23511, 2434, 8492, 2910, 16298, 30413, 3906, 7800, 28810, 7907, 31511, 29167, 26491, 17231, 23134, 13761, 8532, 1812, 14167, 12599, 22027, 22758, 16956, 7866, 13619, 19866, 4571, 31208, 19395, 32476, 22404, 29671, 30489, 16928, 2597, 505, 2367, 19419, 19636, 14929, 620, 4850, 5069, 29478, 974, 2162, 20125, 22533, 24454, 30595, 5886, 26987, 27125, 8599, 11491, 6803, 28726, 27367, 16631, 397, 30699, 11040, 21121, 19856, 11325, 30297, 9355, 30609, 7198, 29257, 3651, 24852, 11729, 2999, 10913, 21827, 27565, 8241, 11082, 8253, 3614, 28673, 21173, 12464, 26348, 27741, 22924, 30634, 4544, 13790, 17237, 31404, 3556, 24372, 26193, 19457, 9546, 18455, 10916, 23885, 17616, 9344, 17591, 24681, 10690, 1050, 28379, 10862, 2208, 28147, 26159, 19728, 4386, 25720, 11971, 23086, 29562, 26016, 25341, 1446, 19161, 15207, 4668, 6510, 4404, 12414, 29372, 28641, 72, 32065, 27322, 26710, 988, 233, 13528, 2551, 8518, 6915, 9154, 18641, 30768, 14625, 18706, 8487, 16540, 27855, 881, 32012, 27174, 7624, 14335, 6193, 16521, 11370, 15094, 22011, 14693, 6248, 11146, 15832, 20288, 32703, 18195, 4564, 3530, 2539, 30573, 13159, 13157, 4954, 8351, 19089, 3044, 11553, 29116, 25385, 26771, 17646, 15623, 29811, 22904, 2365, 7002, 1776, 3033, 24015, 24265, 27770, 29183, 29784, 6274, 16016, 6201, 23929, 13815, 5870, 19235, 9709, 31040, 13920, 29479, 21511, 20666, 3545, 18757, 22876, 20981, 23999, 18704, 19645, 23501, 24458, 1017, 104, 9174, 11661, 14800, 18558, 13054, 23827, 23176, 1464, 5485, 32430, 21819, 18518, 16816, 30924, 22637, 8025, 31511, 28811, 26517, 26610, 13147, 13519, 27098, 12602, 12164, 24465, 5658, 2083, 29706, 8570, 24624, 16303, 15419, 27568, 19319, 2400, 220, 27632, 18058, 29167, 21011, 3805, 29774, 5697, 2181, 31895, 1587, 9366, 4539, 17296, 2998, 32260, 23498, 9627, 23339, 3108, 9267, 15174, 30649, 7947, 11784, 24938, 6310, 26491, 9040, 9472, 13780, 24923, 9645, 8502, 15756, 16997, 21052, 963, 22395, 16671, 15549, 11127, 22778, 18444, 9716, 5398, 20115, 26915, 29006, 2662, 16064, 9600, 7624, 18311, 2549, 23898, 17933, 2691, 3041, 31797, 27614, 16678, 25074, 13656, 4791, 18704, 31511, 25730, 28080, 30216, 21705, 26329, 9377, 21139, 2380, 35, 29833, 20165, 4914, 8248, 12081, 20824, 27170, 7351, 24076, 24315, 23767, 13049, 3170, 19436, 19563, 26179, 31917, 11209, 11478, 3648, 19780, 29604, 28338, 10670, 20534, 597, 13889, 18775, 6777, 788, 944, 10051, 3652, 24135, 12445, 15916, 25785, 11416, 26328, 30002, 31431, 24651, 29798, 13264, 25935, 6350, 8396, 29199, 4229, 21650, 26506, 6393, 28314, 29978, 15333, 18257, 31128, 18770, 14825, 20097, 3213, 4641, 26799, 31700, 22507, 13633, 29148, 485, 29999, 4687, 29290, 5720, 24001, 11806, 18603, 6087, 18715, 10321, 906, 20479, 13870, 12073, 22293, 9837, 9217, 26011, 14904, 22227, 15772, 28582, 4555, 63, 32036, 6371, 3280, 8254, 2631, 18782, 5621, 20045, 22491, 15524, 32353};
    int count3 = new Solution().countTriplets(largeArray2);
    System.out.println("Large array result: " + count3);
  }
} 